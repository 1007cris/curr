#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 320 0 26 3 14 #"#lang curr/lib"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"@("
0 0 14 3 7 #"require"
0 0 22 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"@"
0 0 14 3 12 #"declare-tags"
0 0 22 3 1 #"["
0 0 14 3 8 #"pedagogy"
0 0 22 3 1 #" "
0 0 14 3 10 #"selftaught"
0 0 22 3 1 #" "
0 0 14 3 5 #"group"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"@"
0 0 14 3 6 #"lesson"
0 0 22 3 9 #"[#:title "
0 0 19 3 23 #"\"Circles of Evaluation\""
0 0 22 29 1 #"\n"
0 0 22 3 19 #"        #:duration "
0 0 19 3 12 #"\"20 minutes\""
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        ]{"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" @"
0 0 14 3 17 #"itemlist/splicing"
0 0 22 3 1 #"["
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 8 #"pedagogy"
0 0 22 3 2 #"{@"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 154
(
 #"Draw a big circle on the board. (Tip: make this exciting for kids! A"
 #"sk them to give you a drumroll, and then proudly announce what this "
 #"Circle is called!)"
) 0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 71
(
 #"This is called the Circle of Evaluation, and believe it or not it is"
 #" a "
) 0 0 22 3 1 #"@"
0 0 14 3 6 #"italic"
0 0 22 3 1 #"{"
0 0 19 3 26 #"fully-functioning computer"
0 0 22 3 1 #"}"
0 0 19 3 225
(
 #". That is, we can write programs inside the Circle, and it will eval"
 #"uate them the exact same way that the computer will. If you know how"
 #" to draw a circle of evaluation for a program, you'll know exactly h"
 #"ow to write the code."
) 0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 77
(
 #"Write 4 + 5 (jumbled, in no order in particular) in the Circle of Ev"
 #"aluation."
) 0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 257
(
 #"What is the value of the stuff in the circle? Let's figure out the m"
 #"ath first. (Write the equation.) We know we're adding, so we start w"
 #"ith the plus sign. (\"+\" in the middle.) Then we add 5 and 4 on eit"
 #"her side. (\"5 + 4\".) Does it matter if I write (4 + 5)?"
) 0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 8 #"pedagogy"
0 0 22 3 2 #"{@"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 25 #"Let there be subtraction!"
0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 8 #"pedagogy"
0 0 22 3 2 #"{@"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 353
(
 #"Write a subtraction example in the Circle of Evaluation (again, jumb"
 #"led), and ask students to evaluate it. Typically, students will real"
 #"ize that there are two possible answers! The lesson here is that the"
 #" order of inputs matters. If necessary, have them type examples into"
 #" the Interactions window to see that swapping the inputs gives diffe"
 #"rent results!"
) 0 0 22 3 3 #"}}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 3 #"tag"
0 0 22 3 1 #"["
0 0 14 3 10 #"selftaught"
0 0 22 3 3 #"]{@"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 73
(
 #"Write a subtraction example in the Circle of Evaluation and evaluate"
 #" it. "
) 0 0 22 3 1 #"@"
0 0 14 3 11 #"think-about"
0 0 22 3 1 #"["
0 0 22 29 1 #"\n"
0 0 22 3 20 #"         #:question "
0 0 19 3 38 #"\"How many possible answers are there?\""
0 0 22 29 1 #"\n"
0 0 22 3 18 #"         #:answer "
0 0 19 3 185
(
 #"\"There are two possible answers. For an example, if you put a 3, 5,"
 #" and '-' sign in the Circle of Evaluation, you can either have 3 - 5"
 #", which is -2, or you can have 5 - 3, which is 2.\""
) 0 0 22 3 4 #"]}}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 8 #"pedagogy"
0 0 22 3 2 #"{@"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 234
(
 #"Write 4 + 5 * 6 in a Circle of Evaluation, and ask students what the"
 #"y think the value is. As with subtraction, have them discover that o"
 #"rder of operations matters, and use the actual formulas to demonstra"
 #"te: (\"5 * 6 + 4\", \"4 * 5 + 6\")"
) 0 0 22 3 3 #"}}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 3 #"tag"
0 0 22 3 1 #"["
0 0 14 3 10 #"selftaught"
0 0 22 3 3 #"]{@"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 74
(
 #"Write 4 + 5 * 6 in a Circle of Evaluation. What do you think the val"
 #"ue is?"
) 0 0 22 3 3 #"}}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 125
(
 #"We need to improve our Circle of Evaluation, so we don't run into th"
 #"is problem. Let's use the two solutions we came up with: "
) 0 0 22 3 1 #"@"
0 0 14 3 17 #"itemlist/splicing"
0 0 22 3 1 #"["
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 30 #"all circles have one function "
0 0 22 3 1 #"@"
0 0 14 3 6 #"bitmap"
0 0 22 3 1 #"{"
0 0 19 3 14 #"images/1.5.png"
0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 95
(
 #"it matters in what order the arguments are written-We will always re"
 #"ad and compute inputs from "
) 0 0 22 3 1 #"@"
0 0 14 3 4 #"bold"
0 0 22 3 1 #"["
0 0 19 3 15 #"\"left to right\""
0 0 22 3 1 #"]"
0 0 19 3 1 #"."
0 0 22 3 3 #"}]}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 129
(
 #"We'll separate the function from the inputs by drawing a line betwee"
 #"n them: the function is above the line, the inputs are below."
) 0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 394
(
 #"How do we compute this program? Well, our new rule tells us to look "
 #"at the left first: what is the value of 6? (6, of course!) Now we lo"
 #"ok at the right: that's a new circle, so we have to evaluate that fi"
 #"rst. What is the left-hand side? A 4! And the right? A 5! What are w"
 #"e doing to the 4 and 5? That's right, we're adding. What do we get w"
 #"hen we add 4 and 5? (Replace rightmost circle with 9.)"
) 0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 25 #"Now we have two numbers. "
0 0 22 3 1 #"@"
0 0 14 3 8 #"pedagogy"
0 0 22 3 1 #"{"
0 0 19 3 64
#"What are we doing to 6 and 9? (Replace circle contents with 54.)"
0 0 22 3 1 #"}"
0 0 19 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         @"
0 0 14 3 3 #"tag"
0 0 22 3 1 #"["
0 0 14 3 10 #"selftaught"
0 0 22 3 3 #"]{@"
0 0 14 3 11 #"think-about"
0 0 22 3 1 #"["
0 0 22 29 1 #"\n"
0 0 22 3 20 #"         #:question "
0 0 19 3 31 #"\"What are we doing to 6 and 9?\""
0 0 22 29 1 #"\n"
0 0 22 3 18 #"         #:answer "
0 0 19 3 26 #"\"Multiply them to get 54.\""
0 0 22 3 3 #"]}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 277
(
 #"We write this in Racket the same way. We always put parens before a "
 #"function and after its inputs (Write the parens and the \"*\"). In o"
 #"rder to apply this function, we need to compute the left side and th"
 #"en the right. The left side is the number 6, so we can just write th"
 #"at in. "
) 0 0 22 3 1 #"@"
0 0 14 3 4 #"code"
0 0 22 3 1 #"{"
0 0 19 3 10 #"(* 6 ____)"
0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 220
(
 #"The right side happens to be another Circle of Evaluation (more pare"
 #"ns), so we apply the same rules there: write the function and then l"
 #"ook at the left and the right. These are numbers, so we can write th"
 #"em in directly. "
) 0 0 22 3 1 #"@"
0 0 14 3 4 #"code"
0 0 22 3 1 #"{"
0 0 19 3 13 #"(* 6 (+ 4 5))"
0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 8 #"exercise"
0 0 22 3 1 #"{"
0 0 19 3 166
(
 #"Try writing this in the Interactions window, and hit \"enter\". What"
 #" did you end up with? Now try writing in the complex example we used"
 #". Did you get the same answer?  "
) 0 0 22 3 1 #"@"
0 0 14 3 6 #"bitmap"
0 0 22 3 1 #"{"
0 0 19 3 14 #"images/1.6.png"
0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  @"
0 0 14 3 3 #"tag"
0 0 22 3 1 #"["
0 0 14 3 10 #"selftaught"
0 0 22 3 3 #"]{@"
0 0 14 3 17 #"embedded-wescheme"
0 0 22 3 6 #"[#:id "
0 0 19 3 23 #"\"Circles of Evaluation\""
0 0 22 29 1 #"\n"
0 0 22 3 73
(
 #"                                                      #:definitions-"
 #"text "
) 0 0 19 3 78
(
 #"\"; enter in your equations down in the interactions window to test "
 #"the result\""
) 0 0 22 3 4 #"]}}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{@"
0 0 14 3 11 #"think-about"
0 0 22 3 13 #"[#:question @"
0 0 14 3 4 #"list"
0 0 22 3 2 #"{@"
0 0 14 3 3 #"tag"
0 0 22 3 1 #"["
0 0 14 3 5 #"group"
0 0 22 3 2 #"]{"
0 0 19 3 18 #"With your partner:"
0 0 22 3 1 #"}"
0 0 19 3 86
(
 #" Try to come up with more examples - can you figure out how to subtr"
 #"act three numbers?"
) 0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                      #:answer "
0 0 19 3 152
(
 #"\"One example would be to subtract 1, 2, and 3. There are multiple w"
 #"ays to do this. You can do 1 - (2 - 3) which yields 0 or 3 - (2 - 1)"
 #" which yields 2.\""
) 0 0 22 3 2 #"]}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 8 #"pedagogy"
0 0 22 3 2 #"{@"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 126
(
 #"Let students discuss briefly, but usher them along to the solution u"
 #"sing nested circles. They'll have plenty of practice soon!"
) 0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 165
(
 #"I can't put three numbers in the circle, because there's no way to t"
 #"ell the computer which two numbers should be subtracted first. Is it"
 #" (2 - 3) - 5, or 2 - (3 - 5)?"
) 0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 124
(
 #"Well, if a complete circle evaluates to a number, and numbers go ins"
 #"ide circles, why not try putting circles inside circles?"
) 0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 8 #"pedagogy"
0 0 22 3 2 #"{@"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 53 #"Have students practice circles - make it into a game!"
0 0 22 3 2 #"}}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 40 #"There are several exercises provided on "
0 0 22 3 1 #"@"
0 0 14 3 14 #"worksheet-link"
0 0 22 3 8 #"[#:page "
0 0 20 3 1 #"4"
0 0 22 3 8 #" #:name "
0 0 19 3 32 #"\"Circles-of-Evaluation-Practice\""
0 0 22 3 1 #"]"
0 0 19 3 25 #" of the student workbook."
0 0 22 3 1 #"}"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   @"
0 0 14 3 4 #"item"
0 0 22 3 1 #"{"
0 0 19 3 50 #"Some common bugs when writing simple Racket code: "
0 0 22 3 1 #"@"
0 0 14 3 8 #"itemlist"
0 0 22 3 2 #"[@"
0 0 14 3 4 #"item"
0 0 22 3 2 #"{}"
0 0 22 29 1 #"\n"
0 0 22 3 70
(
 #"                                                                    "
 #" @"
) 0 0 14 3 4 #"item"
0 0 22 3 4 #"{}]}"
0 0 22 29 1 #"\n"
0           0
