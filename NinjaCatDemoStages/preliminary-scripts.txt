Unit 5 - Danger Movement

Show: NinjaCatDogStationary.rkt

By the end of this lesson, you will know how to take a stationary object, for example the enemy in Ninja Cat, and animate it so that it moves. This will be done by changing the x-coordinate of the enemy, through a function that we will code. 

Show: NinjaCatEnemyMove.rkt


Target Movement 

Show: NinjaCatEnemyMove.rkt

After this lesson, we will learn how to animate multiple objects at the same time, and at possibly different speeds depending on what you choose to code. 

NinjaCatRubyMove.rkt

Unit 7 - player movement

Show: NinjaCatCatStationary.rkt

During this lesson, we will be working to animate the currently stationary Ninja Cat. This time, though, you will be able to code Ninja Cat to respond to the arrow keys on your keyboard. Ninja Cat can move in both the x and y directions. 

Show: NinjaCatCatMove.rkt

Unit 8 - collide?

Show: NinjaCatCatMove.rkt

Now that all objects can move in our game, we have to add collision-detection in order to keep track of points, and whether or not a player has lost the game. You can make your own rules about when the game ends, but in Ninja Cat if the cat touches the dog anywhere but on his head, then the player loses. Also, Ninja Cat's score increases if Ninja Cat touches the ruby. Collision-detection works by comparing the x and y values of objects' positions and calculating the distance between the objects.

Show: NinjaCat.rkt
 

start out with no collision, end with collision

